TestCases:

getItem()=
    - null -> RuntimeException()
    - [2 -item-, *...] -> 2

getNext()=
    - [2 -item-, 3] -> 3
    - null -> RuntimeException()
    - [2 -item-] // [2-item-, null] -> null

getPrevious()=
    - [1, 2 -item-] -> 1
    - null -> RuntimeException()
    - [1-item-] // [null, 1-item-] -> null

dequeueNode<T>(T item, T next, T previous)=
    - []<Integer> (4, 5, 3) -> [3, 4, 5]
    - []<Integer> (4, null, 3) -> [3, 4]
    - []<Integer> (4, 5, null) -> [4, 5]
    - []<Integer> (4, null, null) -> [4]
    - []<Integer> (null, 5, 3) -> RuntimeException()
    - []<Integer> (null, null, 3) -> RuntimeException()
    - []<Integer> (null, 5, null) -> RuntimeException()
    - []<Integer> (null, null, null) -> RuntimeException()

isFirstNode()=
    - null -> RuntimeException()
    - [null, 1 -item-] // [1 -item-] // [1-item, null] -> TRUE
    - [1 -item-, *...] -> TRUE
    - [*..., 1-item-] -> FALSE
    - null -> RuntimeException()

isLastNode()=
    - null -> RuntimeException()
    - [1-item-, null] // [1 -item-] -> TRUE
    - [*..., 1 -item-] -> TRUE
    - [1-item-, *...] -> FALSE

isNotATerminalNode()=
    - null -> RuntimeException()
    - [1, 2 -item-, 3] -> TRUE
    - [null, 1 -item-] // [1 -item-] // [1-item, null]-> FALSE
    - [1 -item-, *...] -> FALSE
    - [*..., 1 -item-] -> FALSE



Test Cases DoubleLinkedListQueue:

DoubleLinkedListQueue<T>=
    - []<Integer> (4) -> [4]
    - []<Integer> (null) -> RunTimeException()


append(T data)=
     - [1 , 2] && data == null -> RunTimeException()
     - null && data == null -> RunTimeException()
     - [1 , 2] && data == 3 -> [1 , 2 , 3]
     - [] && data == 3 -> [3]
appendLeft(T data)=
    - [1 , 2] && data == null -> RuntimeException()
    - null && data == null -> RunTimeException()
    - [1 , 2] && data == 3 -> [3 , 1 , 2]
    - [] && data == 3 -> [3]
deleteFirst()=
    - [1 , 2 , 3] -> [2 , 3]
    - [1] -> []
    - [] -> RunTimeException()

deleteLast()=
    - [1 , 2 , 3] -> [1 , 2]
    - [1] -> []
    - [] -> RunTimeException()

DequeNode<T> peekFirst()=
    - [1 , 2 , 3] -> 1
    - [] -> null
DequeNode<T> peekLast()=
    - [1 , 2 , 3] -> 3
    - [] -> null
int size()=
    - [1 , 2 , 3] -> 3
    - [] -> 0


Test Cases complex operations:
 DequeNode<T> getAt(int position)=
    - [] -> RuntimeException()
    - [1,2,3].size < position -> RuntimeException()
    - [1,2,3] && position == 2 -> 3
  DequeNode<T> find (T item)=
    - [] -> RuntimeException()
    - item == null -> RuntimeException()
    - [1,2,3] && item.getItem() == 2 -> 2
    - [1,2,3] && item.getItem() == 4 -> RuntimeException()
  delete(DequeNode<T> node)
    - find(node) == null -> RuntimeException()
    - [1] && node == 1 -> []
    - [1,2,3] && node == 2 -> [1,3]
    - [1,2,3] && node == 3 -> [1,2]
  sort(Comparator<?> comparator)=
    - [1,7,4] && comparator == null -> [1,4,7]
    - [1,7,4] && comparator == Comparator.naturalOrder() -> [1,4,7]
    - [1,7,4] && comparator == Comparator.reverseOrder() -> [7,4,1]
    - [] && comparator == Comparator.naturalOrder() -> []